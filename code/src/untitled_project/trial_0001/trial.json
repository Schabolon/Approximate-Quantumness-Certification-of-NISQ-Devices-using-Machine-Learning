{"trial_id": "0001", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "first_layer_units", "default": null, "conditions": [], "min_value": 32, "max_value": 4096, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "first_layer_activation", "default": "relu", "conditions": [], "values": ["relu", "sigmoid", "tanh"], "ordered": false}}, {"class_name": "Int", "config": {"name": "second_layer_units", "default": null, "conditions": [], "min_value": 32, "max_value": 512, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "second_layer_activation", "default": "relu", "conditions": [], "values": ["relu", "sigmoid", "tanh"], "ordered": false}}, {"class_name": "Int", "config": {"name": "third_layer_units", "default": null, "conditions": [], "min_value": 32, "max_value": 512, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "third_layer_activation", "default": "relu", "conditions": [], "values": ["relu", "sigmoid", "tanh"], "ordered": false}}, {"class_name": "Int", "config": {"name": "fourth_layer_units", "default": null, "conditions": [], "min_value": 32, "max_value": 512, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "fourth_layer_activation", "default": "relu", "conditions": [], "values": ["relu", "sigmoid", "tanh"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "dropout_rate", "default": 0.0, "conditions": [], "values": [0.0, 0.1, 0.2], "ordered": true}}, {"class_name": "Choice", "config": {"name": "learning_rate", "default": 0.01, "conditions": [], "values": [0.01, 0.001, 0.0001], "ordered": true}}], "values": {"first_layer_units": 3008, "first_layer_activation": "relu", "second_layer_units": 32, "second_layer_activation": "sigmoid", "third_layer_units": 416, "third_layer_activation": "tanh", "fourth_layer_units": 320, "fourth_layer_activation": "sigmoid", "dropout_rate": 0.1, "learning_rate": 0.01, "tuner/epochs": 2, "tuner/initial_epoch": 0, "tuner/bracket": 2, "tuner/round": 0}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"/home/jakob/Projects/Approximate-Quantumness-Certification-of-NISQ-Devices-using-Machine-Learning/code/venv/lib/python3.11/site-packages/keras_tuner/src/engine/base_tuner.py\", line 273, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"/home/jakob/Projects/Approximate-Quantumness-Certification-of-NISQ-Devices-using-Machine-Learning/code/venv/lib/python3.11/site-packages/keras_tuner/src/engine/base_tuner.py\", line 238, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jakob/Projects/Approximate-Quantumness-Certification-of-NISQ-Devices-using-Machine-Learning/code/venv/lib/python3.11/site-packages/keras_tuner/src/tuners/hyperband.py\", line 427, in run_trial\n    return super().run_trial(trial, *fit_args, **fit_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jakob/Projects/Approximate-Quantumness-Certification-of-NISQ-Devices-using-Machine-Learning/code/venv/lib/python3.11/site-packages/keras_tuner/src/engine/tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jakob/Projects/Approximate-Quantumness-Certification-of-NISQ-Devices-using-Machine-Learning/code/venv/lib/python3.11/site-packages/keras_tuner/src/engine/tuner.py\", line 233, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jakob/Projects/Approximate-Quantumness-Certification-of-NISQ-Devices-using-Machine-Learning/code/venv/lib/python3.11/site-packages/keras_tuner/src/engine/hypermodel.py\", line 149, in fit\n    return model.fit(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jakob/Projects/Approximate-Quantumness-Certification-of-NISQ-Devices-using-Machine-Learning/code/venv/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 70, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"/tmp/__autograph_generated_filenbj1mctf.py\", line 18, in tf__train_function\n    raise\nValueError: in user code:\n\n    File \"/home/jakob/Projects/Approximate-Quantumness-Certification-of-NISQ-Devices-using-Machine-Learning/code/venv/lib/python3.11/site-packages/keras/src/engine/training.py\", line 1401, in train_function  *\n        return step_function(self, iterator)\n    File \"/home/jakob/Projects/Approximate-Quantumness-Certification-of-NISQ-Devices-using-Machine-Learning/code/venv/lib/python3.11/site-packages/keras/src/engine/training.py\", line 1384, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/home/jakob/Projects/Approximate-Quantumness-Certification-of-NISQ-Devices-using-Machine-Learning/code/venv/lib/python3.11/site-packages/keras/src/engine/training.py\", line 1373, in run_step  **\n        outputs = model.train_step(data)\n    File \"/home/jakob/Projects/Approximate-Quantumness-Certification-of-NISQ-Devices-using-Machine-Learning/code/venv/lib/python3.11/site-packages/keras/src/engine/training.py\", line 1150, in train_step\n        y_pred = self(x, training=True)\n    File \"/home/jakob/Projects/Approximate-Quantumness-Certification-of-NISQ-Devices-using-Machine-Learning/code/venv/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 70, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"/home/jakob/Projects/Approximate-Quantumness-Certification-of-NISQ-Devices-using-Machine-Learning/code/venv/lib/python3.11/site-packages/keras/src/engine/input_spec.py\", line 298, in assert_input_compatibility\n        raise ValueError(\n\n    ValueError: Input 0 of layer \"sequential\" is incompatible with the layer: expected shape=(None, 8000), found shape=(32, 4)\n\n"}